require 'autotest/growl'
require 'autotest/fsevent'

Autotest::Growl::show_modified_files = true
Autotest::Growl::remote_notification = true


module Autotest::Growl

Autotest.add_hook :initialize do |autotest|
    %w{.svn .hg .git vendor}.each {|exception| autotest.add_exception(exception) }
end

  def self.growl title, msg, img, pri=0, stick=""
    system "growlnotify -H localhost -n autotest --image #{img} -p #{pri} -m #{msg.inspect} #{title} #{stick}"
  end

 Autotest.add_hook :post_initialize do |autotest|
    growl "autotest running", "Started"
 end

 Autotest.add_hook :run_command do |autotest|
    @label = File.basename.upcase
    @run_scenarios = false
    print "\n"*2 + '-'*80 + "\n"*2
    print "\e[2J\e[f"   # clear the terminal
  end

  Autotest.add_hook :ran_command do |autotest|
    gist = autotest.results.grep(/\d+\s+(example|test)s?/).map {|s| s.gsub(/(\e.*?m|\n)/, '') }.join(" / ")
    if gist == ''
      growl "#{@label} cannot run tests", '', "~/Library/autotest/rails_fail.png"
    else
      if gist.match /[1-9]\d*\s/+(failure|error)
        growl "#{@label} fails some tests", "#{gist}", "~/Library/autotest/rails_fail.png"
      elsif gist.match /pending/
        growl "#{@label} has pending tests", "#{gist}", "~/Library/autotest/rails_pending.png"
        @run_scenarios = true
      else
        growl "#{@label} passes all tests", "#{gist}", "~/Library/autotest/rails_ok.png"
        @run_scenarios = true
      end
    end
  end
end

